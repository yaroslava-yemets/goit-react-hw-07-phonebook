{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/contactForm/form-actions.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contactForm/form-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","connect","state","contacts","items","dispatch","onSubmit","formActions","useState","setName","setNumber","nameInputId","numberInputId","handleChange","evt","currentTarget","value","reset","preventDefault","foundNames","map","contact","toLocaleLowerCase","lowerName","includes","alert","className","s","form","label","htmlFor","input","type","pattern","title","required","onChange","button","filter","target","inputId","labeltId","getVisibleContacts","allContacts","lowerCasedFilter","onDeleteContact","list","item","onClick","App","context","console","log","actions","createReducer","_","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","formReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.b3307cac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"context\":\"App_context__10UXM\"};","import { createAction } from '@reduxjs/toolkit'\nimport shortid from 'shortid';\n\nexport const addContact = createAction('contacts/add', (name, number) => ({\n    payload: {\n        id: shortid.generate(),\n        name,\n        number,\n    },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n// export const addContact = (name, number) => ({\n//     type: types.ADD,\n//     payload: {\n//         id: shortid.generate(),\n//         name,\n//         number,\n//     }\n// });\n\n// export const deleteContact = contactId => ({\n//     type: types.DELETE,\n//     payload: contactId,\n// });\n\n// export const changeFilter = value => ({\n//     type: types.CHANGE_FILTER,\n//     payload: value,\n// });\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as formActions from '../../redux/contactForm/form-actions';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm ({ contacts, onSubmit }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n\n    const handleChange = (evt) => {\n        const { value, name } = evt.currentTarget;\n        if(name === 'name') {\n            setName(value);\n        } if (name === 'number') {\n            setNumber(value);\n        }\n    };\n\n    const addContact = ( name, number ) => {\n        const foundNames = contacts.map(contact => contact.name.toLocaleLowerCase());\n        const lowerName = name.toLocaleLowerCase();\n        if(foundNames.includes(lowerName)){\n         return alert(`${name} is already in contacts`);\n        }\n          onSubmit(name, number);\n    };\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        addContact(name, number);\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className={s.form}>\n            <label className={s.label} htmlFor={nameInputId}>Name</label>\n            <input\n                className={s.input}\n                value={name}\n                type=\"text\"\n                name=\"name\"\n                id={nameInputId}\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                required\n                onChange={handleChange}\n            />\n\n            <label className={s.label} htmlFor={numberInputId}>Number</label>\n            <input\n                className={s.input} \n                value={number}\n                type=\"tel\"\n                name=\"number\"\n                id={numberInputId}\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                required\n                onChange={handleChange}\n            />\n                \n            <button\n            className={s.button}\n                 type=\"submit\"\n            >\n                Add contact\n            </button>\n        </form>\n    );\n};\n\nconst mapStateToProps = state => ({\n    contacts: state.contacts.items,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (name, number) => dispatch(formActions.addContact(name, number)),\n});\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onSubmit: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as formActions from '../../redux/contactForm/form-actions';\nimport shortid from 'shortid';\nimport s from './Filter.module.css';\n\nconst Filter = ({value, onChange}) => {\n    const inputId = shortid.generate();\n    const labeltId = shortid.generate();\n    return (\n    <>\n        <div className={s.form}>\n            <label htmlFor={labeltId} className={s.label}> Find contacts by name</label>\n            <input className={s.input} id={inputId} type=\"text\" value={value} onChange={onChange}/>\n        </div>\n    </>\n    )\n}    \n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: evt => dispatch(formActions.changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as formActions from '../../redux/contactForm/form-actions';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({contacts, onDeleteContact }) => (\n    <ul className={s.list}>\n        {contacts.map(({ id, name, number }) => (\n            <li key={id} className={s.item}>\n                <span>{name}:</span>\n                <span>{number}</span>\n                <button type=\"button\" onClick={() => onDeleteContact(id)}>Delete</button>\n            </li>\n        ))}\n    </ul>\n);\n\n\nconst getVisibleContacts = (allContacts, filter) => {\n    const lowerCasedFilter = filter.toLocaleLowerCase();\n    return allContacts.filter(contact => contact.name.toLocaleLowerCase().includes(lowerCasedFilter))\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n    contacts: getVisibleContacts(items, filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n        onDeleteContact: id => dispatch(formActions.deleteContact(id)),\n});\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport s from './App.module.css';\n\nfunction App () {\n  return (\n    <div className={s.context}>\n      <h1 className=\"text\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"text\">Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  )\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport * as actions from './form-actions';\n\nconsole.log(actions.deleteContact.type);\n\nconst items = createReducer([], {\n    [actions.addContact]: (state, { payload }) => [...state, payload],\n    [actions.deleteContact]: (state, { payload }) => state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n    [actions.changeFilter]: (_, action) => action.payload,\n});\n\n\n// const items = (state = [], {type, payload}) => {\n//     switch(type) {\n//         case types.ADD:\n//             return [...state, payload];\n        \n//         case types.DELETE:\n//             return state.filter(contact => contact.id !== payload);\n\n//         default:\n//             return state;\n//     }\n// };\n\n\n// const filter = (state = '', {type, payload}) => {\n//     switch(type) {\n//         case types.CHANGE_FILTER:\n//             return payload;\n\n//         default:\n//             return state;\n//     }\n// };\n  \nexport default combineReducers({\n  items,\n  filter  \n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { \n    persistStore, \n    persistReducer, \n    FLUSH, \n    REHYDRATE, \n    PAUSE, \n    PERSIST, \n    PURGE, \n    REGISTER \n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger'\nimport formReducer from './contactForm/form-reducer';\n\nconst middleware = [...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }), \n    logger,\n];\n\nconst contactsPersistConfig = {\n    key: 'contacts',\n    storage,\n    blacklist: ['filter'],\n};\n\nconst store = configureStore({\n    reducer: {\n        contacts: persistReducer(contactsPersistConfig, formReducer),\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};"],"sourceRoot":""}