{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactList/ContactList.module.css","App.module.css","components/ContactForm/ContactForm.module.css","redux/contactForm/contacts-actions.js","redux/contactForm/contacts-operations.js","redux/contactForm/contacts-selector.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","redux/contactForm/contacts-reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","fetchContacts","dispatch","get","then","data","catch","error","addContact","name","number","contact","post","deleteContact","id","delete","getContacts","state","contacts","items","getIsLoading","loading","getFilter","filter","getVisibleContacts","createSelector","allContacts","lowerCasedFilter","toLocaleLowerCase","includes","connect","contactsSelectors","isLoading","onSubmit","contactsOperations","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","evt","currentTarget","value","reset","preventDefault","foundNames","map","lowerName","alert","className","s","form","label","htmlFor","input","type","pattern","title","required","onChange","button","contactsActions","target","inputId","labeltId","onDeleteContact","useEffect","length","list","item","onClick","context","createReducer","_","payload","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.772c64a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Filter_form__2qyBI\",\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"item\":\"ContactList_item__3YsZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"context\":\"App_context__10UXM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","import { createAction } from '@reduxjs/toolkit'\n\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const changeFilter = createAction('contacts/changeFilter');\n\n\n","import { \n  addContactError, \n  addContactSuccess, \n  addContactRequest, \n  deleteContactError,\n  deleteContactSuccess,\n  deleteContactRequest,\n  fetchContactsError,\n  fetchContactsSuccess,\n  fetchContactsRequest, \n} from './contacts-actions';\nimport axios from \"axios\";\n\naxios.defaults.baseURL = 'http://localhost:3000';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios.get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact = (name, number) => dispatch => {\n  const contact = {\n      name,\n      number,\n  };\n\n  dispatch(addContactRequest());\n\n  axios.post('/contacts', contact)\n      .then(({ data }) => dispatch(addContactSuccess(data)))\n      .catch(error => dispatch(addContactError(error)));\n};\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios.delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\n// export const fetchContacts = createAsyncThunk(\n//   'contacts/fetchContacts',\n//   async (_, { rejectWithValue }) => {\n//     try {\n//       const contacts = await contactsApi.fetchContacts();\n//       return contacts;\n//     } catch (error) {\n//       return rejectWithValue(error)\n//     }\n//   },\n// );\n\n// export const addContact = createAsyncThunk(\n//   'contacts/fetchContacts',\n//   async (name, number) => {\n//     try {\n//       const contacts = await contactsApi.addContact(name, number);\n//       return contacts;\n//     } catch (error) {\n//       return error\n//     }\n//   },\n// );\n\n\n// ====  without redux thunk\n\n// export const fetchContacts = () => async dispatch => {\n//     dispatch(formActions.fetchContactRequest())\n\n//     try {\n//         const contacts = await contactsApi.fetchContacts();\n//         dispatch(formActions.fetchContactSuccess(contacts));\n//     } catch (error) {\n//         dispatch(formActions.fetchContactError(error));\n//     }\n// };","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getVisibleContacts = createSelector(\n    [getContacts, getFilter], \n    (allContacts, filter) => {\n        const lowerCasedFilter = filter.toLocaleLowerCase();\n        return allContacts.filter(contact => \n            contact.name.toLocaleLowerCase().includes(lowerCasedFilter));\n    },\n);\n\n// =====  getVisibleContacts without memoization\n\n// export const getVisibleContacts = state => {\n//     const allContacts = getContacts(state);\n//     const filter = getFilter(state);\n//     const lowerCasedFilter = filter.toLocaleLowerCase();\n\n//     return allContacts.filter(contact => \n//         contact.name.toLocaleLowerCase().includes(lowerCasedFilter));\n// };\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from 'redux/contactForm';\nimport shortid from 'shortid';\nimport s from './ContactForm.module.css';\n\nfunction ContactForm ({ contacts, onSubmit, isLoading }) {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n    const nameInputId = shortid.generate();\n    const numberInputId = shortid.generate();\n\n    const handleChange = (evt) => {\n        const { value, name } = evt.currentTarget;\n        if(name === 'name') {\n            setName(value);\n        } if (name === 'number') {\n            setNumber(value);\n        }\n    };\n\n    const addContact = ( name, number ) => {\n        const foundNames = contacts.map(contact => contact.name.toLocaleLowerCase());\n        const lowerName = name.toLocaleLowerCase();\n        if(foundNames.includes(lowerName)){\n         return alert(`${name} is already in contacts`);\n        }\n        onSubmit(name, number);\n\n    };\n\n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        addContact(name, number);\n        reset();\n    };\n\n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <>\n            <form onSubmit={handleSubmit} className={s.form}>\n                <label className={s.label} htmlFor={nameInputId}>Name</label>\n                <input\n                    className={s.input}\n                    value={name}\n                    type=\"text\"\n                    name=\"name\"\n                    id={nameInputId}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    onChange={handleChange}\n                />\n\n                <label className={s.label} htmlFor={numberInputId}>Number</label>\n                <input\n                    className={s.input} \n                    value={number}\n                    type=\"tel\"\n                    name=\"number\"\n                    id={numberInputId}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    onChange={handleChange}\n                />\n                    \n                <button\n                className={s.button}\n                    type=\"submit\"\n                >\n                    Add contact\n                </button>\n            </form>\n            {isLoading && <h2>Loading...</h2>}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    contacts: contactsSelectors.getContacts(state),\n    isLoading: contactsSelectors.getIsLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onSubmit: (name, number) => dispatch(contactsOperations.addContact(name, number)),\n});\n\nContactForm.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    isLoading: PropTypes.bool,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsSelectors } from 'redux/contactForm';\nimport * as contactsActions from 'redux/contactForm/contacts-actions';\nimport shortid from 'shortid';\nimport s from './Filter.module.css';\n\nconst Filter = ({value, onChange}) => {\n    const inputId = shortid.generate();\n    const labeltId = shortid.generate();\n    return (\n    <>\n        <div className={s.form}>\n            <label htmlFor={labeltId} className={s.label}> Find contacts by name</label>\n            <input className={s.input} id={inputId} type=\"text\" value={value} onChange={onChange}/>\n        </div>\n    </>\n    )\n}    \n\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n    value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: evt => dispatch(contactsActions.changeFilter(evt.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { contactsOperations, contactsSelectors } from 'redux/contactForm';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact, fetchContacts }) => {\n    useEffect(() => {\n        fetchContacts();\n    }, [fetchContacts]);\n    \n    return contacts.length > 0 && (\n        <ul className={s.list}>\n            {contacts.map(({ id, name, number }) => (\n                <li key={id} className={s.item}>\n                    <span>{name}:</span>\n                    <span>{number}</span>\n                    <button type=\"button\" onClick={() => onDeleteContact(id)}>Delete</button>\n                </li>\n            ))}\n        </ul>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n    contacts: contactsSelectors.getVisibleContacts(state), \n});\n\nconst mapDispatchToProps = dispatch => ({\n    onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n    fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(PropTypes.object),\n    onDeleteContact: PropTypes.func.isRequired,\n    fetchContacts: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsSelectors } from 'redux/contactForm';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport s from './App.module.css';\n\nfunction App ({ contacts }) {\n  return (\n    <div className={s.context}>\n      <h1 className=\"text\">Phonebook</h1>\n      <ContactForm />\n      {contacts.length > 0 &&\n      <> \n        <Filter />\n        <h2 className=\"text\">Contacts</h2>\n      </>\n      }\n      <ContactList />\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: contactsSelectors.getContacts(state),\n});\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n\nexport default connect(mapStateToProps, null)(App);\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\nimport { \n  addContactError, \n  addContactSuccess, \n  addContactRequest, \n  deleteContactSuccess,\n  deleteContactRequest,\n  deleteContactError,\n  fetchContactsError,\n  fetchContactsRequest,\n  fetchContactsSuccess, \n  changeFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) => state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, action) => action.payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst error = createReducer(null, {\n  [fetchContactsError]: (_, action) => action.payload,\n  [addContactError]: (_, action) => action.payload,\n  [deleteContactError]: (_, action) => action.payload,\n});\n  \nexport default combineReducers({\n  items,\n  filter, \n  loading, \n  error,\n});\n\n\n// =====  reducers for thunk\n\n// const entities = createReducer([], {\n//   [fetchContacts.fulfilled]: (_, action) => action.payload,\n//   [addContact.fulfilled]: (state, { payload }) => [...state, payload],\n// });\n\n\n// const isLoading = createReducer(false, {\n//   [fetchContacts.pending]: () => true,\n//   [fetchContacts.fulfilled]: () => false,\n//   [fetchContacts.rejected]: () => false,\n// })\n\n// const error = createReducer(null, {\n//   [fetchContacts.rejected]: (_, action) => action.payload,\n//   [fetchContacts.pending]: () => null,\n// })\n\n\n// export default combineReducers({\n//   entities,\n//   isLoading,\n//   error,\n// });\n\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {  \n    FLUSH, \n    REHYDRATE, \n    PAUSE, \n    PERSIST, \n    PURGE, \n    REGISTER \n} from 'redux-persist';\nimport logger from 'redux-logger'\nimport contactsReducer from './contactForm/contacts-reducer';\n\nconst middleware = [...getDefaultMiddleware({\n        serializableCheck: {\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n        },\n    }), \n    logger,\n];\n\nconst store = configureStore({\n    reducer: {\n        contacts: contactsReducer,\n    },\n    middleware,\n    devTools: process.env.NODE_ENV === 'development',\n});\n\n// const store = configureStore({\n//     reducer: {\n//         contacts: contactsReducer,\n//     },\n// })\n\n// const persistor = persistStore(store);\n\n// export default { store, persistor };\nexport default store;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport store from 'redux/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n        <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}